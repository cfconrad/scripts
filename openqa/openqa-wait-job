#!/usr/bin/perl

use Mojo::Base -strict;
use Mojo::JSON 'decode_json';
use Mojo::UserAgent;
use Data::Dumper;
use Getopt::Long qw(:config no_ignore_case bundling auto_help);
use Cwd qw'getcwd abs_path';

exit(main(@ARGV));

sub check_job
{
    my ($host, $job) = @_;
    my $cmd = "openqa-cli api --host $host jobs/$job";
    my $output = qx($cmd);
    die("ERROR: command failed '$cmd'") unless($? == 0);
    my $res = decode_json($output);
    if ($res->{error_status}){
        return { 'job' => $job, 'host' => $host, result => 'ERROR_STATUS', msg => $res->{error_status} };
    }
    my $state = $res->{job}->{state};
    print "$host/t$job - ". $res->{job}->{test} . " => $state" . $/;
    if ( $state eq 'done' || $state eq 'cancelled'){
        system('notify-send "Openqa-job[' . $job . '] ready result:' . $res->{job}->{result} . '"');
        return { job => $job, host => $host, result => $res->{job}->{result}, openqa_res => $res };
    }
    return;
}

sub download_job
{
    my ($host, $job) = @_;
    my $dir = abs_path(getcwd);
    mkdir $job unless -d $job;
    chdir $job;

    for my $file (qw(vars.json serial0.txt autoinst-log.txt
         worker-log.txt serial_terminal.txt virtio_console1.log)){
        system("wget -q $host/tests/$job/file/$file");
    }
    chdir $dir;
}

sub do_http_request
{
    my $url = shift;
    my $max_tries = 3;
    my $res;
    my $ua = Mojo::UserAgent->new();
    $ua->max_redirects(5);
    for(my $i = 0; $i < $max_tries; $i++){
        $res = $ua->get($url)->result;
        return $res if ($res->is_success());
        print "[". ($i + 1) . "/$max_tries] Get $url failed - " . $res->message . $/;
        sleep 1;
    }
    die("Failed to get $url");
}

sub get_schedule_statistics
{
    my ($host, $prio) = @_;
    $prio //= -1;
    $prio = 50 if ($prio == -1);
    $host = "https://$host" unless ($host =~ m%https?://%);
    my $url = "$host/tests/list_scheduled_ajax";
    my $res = do_http_request($url);
    my $json = decode_json($res->text());
    my $count = scalar(@{$json->{data}});
    my $blocked = scalar(grep { $_->{blocked_by_id} } @{$json->{data}});
    my $with_equal_prio = scalar(grep { $_->{prio} == $prio } @{$json->{data}});
    my $with_lower_prio = scalar(grep { $_->{prio} < $prio } @{$json->{data}});
    print("$count scheduled jobs ($blocked blocked by other jobs) ($with_lower_prio with priority < $prio, $with_equal_prio with priority == $prio)$/");
}

sub set_job_prio
{
    my ($host, $job, $prio) = @_;
    my $cmd = "openqa-cli api --host $host -X PUT --json --data '{\"priority\": $prio }' jobs/$job ";
    my $output = qx($cmd);
    die("ERROR: command failed '$cmd'") unless($? == 0);
}

sub main {
    my $HOST = 'https://openqa.suse.de';
    my $JOB = 0;
    my $DO_DOWNLOAD = 0;
    my $prio = -1;
    my @JOBS;
    GetOptions(
        'host=s' => \$HOST,
        'prio=i' => \$prio,
        'download' => \$DO_DOWNLOAD,
    ) or die;

    my @parsable_urls;
    if ( -p STDIN ){
        while (my $line = <>){
            push(@parsable_urls, ($line =~ m%(https?://[^/]+/(?:t\d+|tests/\d+))\s+%gm));
            if ($line =~ m/^\s*{\s*$/ || $line =~ m/^\s*{.*}\s*$/){
                say "Hmm yummy -- looks like JSON input.";
                my $cnt_start = scalar(grep { m/{/ } split(//, $line));
                my $cnt_end = scalar(grep { m/}/ } split(//, $line));
                while ($cnt_start != $cnt_end) {
                  if (<>) {
                    $line .= $_;
                  } else {
                    last;
                  }
                  $cnt_start = scalar(grep { m/{/ } split(//, $line));
                  $cnt_end = scalar(grep { m/}/ } split(//, $line));
                }
                my $json = decode_json($line);
                if (my $ids = $json->{ids}) {
                    if (ref($ids) eq 'HASH') {
                        push @JOBS, values %$ids;
                    } else {
                        push @JOBS, @$ids;
                    }
                }
                push @JOBS, $json->{id} if $json->{id};
                if ($json->{failed}){
                    for my $f (@{$json->{failed}}){
                        push @JOBS, $f->{job_id} if ($f->{job_id});
                    }
                }
            }
        }
    } else {
        push(@parsable_urls, @ARGV);
    }

    for my $url (@parsable_urls){
        if ($url =~ m%^(https?://[^/]+)/tests/(\d+)%){
            $HOST = $1;
            push @JOBS, {host =>$1, id=>$2};
        }elsif ($url =~ m%^(https?://[^/]+)/t(\d+)%){
            $HOST = $1;
            push @JOBS, {host =>$1, id=>$2};
        }elsif ($url =~ m/^\d+$/){
            push @JOBS, $url;
        } else {
            die("Unable to parse $url");
        }
    }

    my %jobs_by_host;

    for my $job (@JOBS) {
        my $host = $HOST;
        my $jobid = $job;

        if(ref($job) eq 'HASH') {
            $host = $job->{host};
            $jobid = $job->{id};
        }

        $jobs_by_host{$host} //= [];
        push @{$jobs_by_host{$host}} , $jobid;
    }
    #  sort @{$jobs_by_host{$_}} for (keys %jobs_by_host);

    print "Wait for " . @JOBS . " jobs:";
    print $/ if(@JOBS > 1);

    for my $host (keys %jobs_by_host) {
        for my $jobid (@{$jobs_by_host{$host}}){
            say "  $host/t$jobid";
        }
    }
    my %results_by_host;
    my $count = 0;
    while ( 1 ) {
        $count++;
        print("-[$count]-$/");
        for my $host (keys %jobs_by_host) {
            @JOBS = @{$jobs_by_host{$host}};
            my $results = $results_by_host{$host};


            get_schedule_statistics($host, $prio) if(@JOBS);
            for my $job (keys(%{$results})){
                my $j = $results->{$job};
                print "$host/t$job - ". $j->{openqa_res}->{job}->{test} . " => $j->{result}" . $/;
            }

            next if (@JOBS == 0);

            my @next_jobs;
            for my $job (@JOBS){
                my $res = check_job($host, $job);
                if ($res){
                    $results_by_host{$host} //= {};
                    $results_by_host{$host}->{$job} = $res;
                    download_job($host, $job) if ($DO_DOWNLOAD);
                } else {
                    push @next_jobs , $job;
                    set_job_prio($host, $job, $prio) if ($prio != -1 && $count == 1);
                }
            }
            $jobs_by_host{$host} = [@next_jobs];
            sleep 5;
        }
        my @all_jobs = map { @{$jobs_by_host{$_}} } keys %jobs_by_host;
        last if (@all_jobs == 0);
    }

    say "X"x80;
    my @all_results;
    for my $host (keys %results_by_host) {
        for my $jobid (keys %{$results_by_host{$host}}) {
            my $j = $results_by_host{$host}->{$jobid};
            push @all_results, $j->{result};
            print "$host/t$jobid - ". $j->{openqa_res}->{job}->{test} . " => $j->{result}" . $/;
        }
    };
    exit grep {!m/^passed$/} @all_results;
}

__END__

=head1 NAME

openqa-wait-job - Poll status from given job(s) and notify if ready.

=head1 SYNOPSIS

Could be used to parse output of C<openqa-clone-custom-git-refspec> or
C<openqa-client --json-output isos post>.

If one job failed, the exit code of this programm is also > 0.

example:
openqa-client --json-output isos post VERSION=FOO | openqa-wait-job --prio 20 -

openqa-clone-custom-git-refspec <pr-url> <job-url> | openqa-wait-job --prio 20 -

openqa-wait-job [url] [[url2] [url3] ...]

  Options:
    --help       brief help message
    --job  <num> Specify a job as url or number
    --prio <num> If given, set JOB(s) priority to given value
    --host       Specify a host, default https://openqa.suse.de
    --download   Download most needed logfiles from job if it is finish

=cut
